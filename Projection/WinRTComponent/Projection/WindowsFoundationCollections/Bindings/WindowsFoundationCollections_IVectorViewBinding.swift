// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

// MARK: Windows.Foundation.Collections.IVectorView`1<Int32>

extension WindowsFoundationCollections_IVectorViewBinding {
    internal enum Int32: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IVectorView<Swift.Int32>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IVectorView_Int32

        public static let typeName = "Windows.Foundation.Collections.IVectorView`1<Int32>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Int32>, WindowsFoundationCollections_IVectorViewProtocol {
            public typealias T = Swift.Int32

            public func getAt(_ index: Swift.UInt32) throws -> Swift.Int32 {
                try _interop.getAt(index)
            }

            public func indexOf(_ value: Swift.Int32, _ index: inout Swift.UInt32) throws -> Swift.Bool {
                try _interop.indexOf(value, &index)
            }

            public func getMany(_ startIndex: Swift.UInt32, _ items: [Swift.Int32]) throws -> Swift.UInt32 {
                try _interop.getMany(startIndex, items)
            }

            public func _size() throws -> Swift.UInt32 {
                try _interop.get_Size()
            }

            // MARK: Windows.Foundation.Collections.IIterable`1<Int32> members

            public func first() throws -> WindowsFoundationCollections_IIterator<Swift.Int32> {
                try COM.NullResult.unwrap(_iiterable.first())
            }

            private var _lazyIIterable: COM.COMReference<SWRT_WindowsFoundationCollections_IIterable_Int32>.Optional = .none

            internal var _iiterable: COM.COMInterop<SWRT_WindowsFoundationCollections_IIterable_Int32> {
                get throws {
                    try _lazyIIterable.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundationCollections_IIterable_Int32.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IVectorView_Int32_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            GetAt: { this, index, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.getAt(index)
            } },
            get_Size: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this._size()
            } },
            IndexOf: { this, value, index, _result in _implement(this) { this in
                guard let index else { throw COM.COMError.pointer }
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.indexOf(value, &index.pointee)
            } },
            GetMany: { this, startIndex, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.Int32Binding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(startIndex, items_swift)
            } }
        )
    }
}