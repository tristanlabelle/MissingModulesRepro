// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

// MARK: Windows.Foundation.Collections.IIterator`1<Int32>

extension WindowsFoundationCollections_IIteratorBinding {
    internal enum Int32: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundationCollections_IIterator<Swift.Int32>
        public typealias ABIStruct = SWRT_WindowsFoundationCollections_IIterator_Int32

        public static let typeName = "Windows.Foundation.Collections.IIterator`1<Int32>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Int32>, WindowsFoundationCollections_IIteratorProtocol {
            public func moveNext() throws -> Swift.Bool {
                try _interop.moveNext()
            }

            public func getMany(_ items: [Swift.Int32]) throws -> Swift.UInt32 {
                try _interop.getMany(items)
            }

            public func _current() throws -> Swift.Int32 {
                try _interop.get_Current()
            }

            public func _hasCurrent() throws -> Swift.Bool {
                try _interop.get_HasCurrent()
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundationCollections_IIterator_Int32_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_Current: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this._current()
            } },
            get_HasCurrent: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this._hasCurrent()
            } },
            MoveNext: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.moveNext()
            } },
            GetMany: { this, itemsLength, items, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let items_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.Int32Binding>.fromABI(pointer: items, count: itemsLength)
                _result.pointee = try this.getMany(items_swift)
            } }
        )
    }
}