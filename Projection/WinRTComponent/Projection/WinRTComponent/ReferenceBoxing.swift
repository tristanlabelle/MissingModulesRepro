// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

public enum ReferenceBoxing {
    // MARK: WinRTComponent.IReferenceBoxingStatics members

    public static func boxInt32(_ value: Swift.Int32) throws -> Swift.Int32? {
        try _ireferenceBoxingStatics.boxInt32(value)
    }

    public static func unboxInt32(_ value: Swift.Int32?) throws -> Swift.Int32 {
        try _ireferenceBoxingStatics.unboxInt32(value)
    }

    public static func boxMinimalEnum(_ value: MinimalEnum) throws -> MinimalEnum? {
        try _ireferenceBoxingStatics.boxMinimalEnum(value)
    }

    public static func unboxMinimalEnum(_ value: MinimalEnum?) throws -> MinimalEnum {
        try _ireferenceBoxingStatics.unboxMinimalEnum(value)
    }

    public static func boxMinimalStruct(_ value: MinimalStruct) throws -> MinimalStruct? {
        try _ireferenceBoxingStatics.boxMinimalStruct(value)
    }

    public static func unboxMinimalStruct(_ value: MinimalStruct?) throws -> MinimalStruct {
        try _ireferenceBoxingStatics.unboxMinimalStruct(value)
    }

    // MARK: Implementation details

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "WinRTComponent.ReferenceBoxing")
            }
        }
    }

    private static var _lazyIReferenceBoxingStatics: COM.COMReference<SWRT_WinRTComponent_IReferenceBoxingStatics>.Optional = .none

    internal static var _ireferenceBoxingStatics: COM.COMInterop<SWRT_WinRTComponent_IReferenceBoxingStatics> {
        get throws {
            try _lazyIReferenceBoxingStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WinRTComponent_IReferenceBoxingStatics.self)).cast()
            }
        }
    }
}