// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

public enum IOutputArgumentBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = IOutputArgument
    public typealias ABIStruct = SWRT_WinRTComponent_IOutputArgument

    public static let typeName = "WinRTComponent.IOutputArgument"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<IOutputArgumentBinding>, IOutputArgumentProtocol {
        public func int32(_ value: Swift.Int32, _ result: inout Swift.Int32) throws {
            try _interop.int32(value, &result)
        }

        public func string(_ value: Swift.String, _ result: inout Swift.String) throws {
            try _interop.string(value, &result)
        }

        public func object(_ value: WindowsRuntime.IInspectable?, _ result: inout WindowsRuntime.IInspectable?) throws {
            try _interop.object(value, &result)
        }

        public func `enum`(_ value: MinimalEnum, _ result: inout MinimalEnum) throws {
            try _interop.enum(value, &result)
        }

        public func `struct`(_ value: MinimalStruct, _ result: inout MinimalStruct) throws {
            try _interop.struct(value, &result)
        }

        public func interface(_ value: IMinimalInterface?, _ result: inout IMinimalInterface?) throws {
            try _interop.interface(value, &result)
        }

        public func `class`(_ value: MinimalClass?, _ result: inout MinimalClass?) throws {
            try _interop.class(value, &result)
        }

        public func delegate(_ value: MinimalDelegate?, _ result: inout MinimalDelegate?) throws {
            try _interop.delegate(value, &result)
        }

        public func array(_ value: [Swift.String], _ result: inout [Swift.String]) throws {
            try _interop.array(value, &result)
        }

        public func reference(_ value: Swift.Int32?, _ result: inout Swift.Int32?) throws {
            try _interop.reference(value, &result)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WinRTComponent_IOutputArgument_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        Int32: { this, value, result in _implement(this) { this in
            guard let result else { throw COM.COMError.pointer }
            try this.int32(value, &result.pointee)
        } },
        String: { this, value, result in _implement(this) { this in
            guard let result else { throw COM.COMError.pointer }
            let value_swift = WindowsRuntime.StringBinding.fromABI(value)
            var result_swift: Swift.String = ""
            try this.string(value_swift, &result_swift)
            result.pointee = try WindowsRuntime.StringBinding.toABI(result_swift)
        } },
        Object: { this, value, result in _implement(this) { this in
            guard let result else { throw COM.COMError.pointer }
            let value_swift = WindowsRuntime.IInspectableBinding.fromABI(value)
            var result_swift: WindowsRuntime.IInspectable? = nil
            try this.object(value_swift, &result_swift)
            result.pointee = try WindowsRuntime.IInspectableBinding.toABI(result_swift)
        } },
        Enum: { this, value, result in _implement(this) { this in
            guard let result else { throw COM.COMError.pointer }
            let value_swift = MinimalEnum.fromABI(value)
            var result_swift: MinimalEnum = .init()
            try this.enum(value_swift, &result_swift)
            result.pointee = MinimalEnum.toABI(result_swift)
        } },
        Struct: { this, value, result in _implement(this) { this in
            guard let result else { throw COM.COMError.pointer }
            let value_swift = MinimalStruct.fromABI(value)
            var result_swift: MinimalStruct = .init()
            try this.struct(value_swift, &result_swift)
            result.pointee = MinimalStruct.toABI(result_swift)
        } },
        Interface: { this, value, result in _implement(this) { this in
            guard let result else { throw COM.COMError.pointer }
            let value_swift = IMinimalInterfaceBinding.fromABI(value)
            var result_swift: IMinimalInterface? = nil
            try this.interface(value_swift, &result_swift)
            result.pointee = try IMinimalInterfaceBinding.toABI(result_swift)
        } },
        Class: { this, value, result in _implement(this) { this in
            guard let result else { throw COM.COMError.pointer }
            let value_swift = MinimalClassBinding.fromABI(value)
            var result_swift: MinimalClass? = nil
            try this.class(value_swift, &result_swift)
            result.pointee = try MinimalClassBinding.toABI(result_swift)
        } },
        Delegate: { this, value, result in _implement(this) { this in
            guard let result else { throw COM.COMError.pointer }
            let value_swift = MinimalDelegateBinding.fromABI(value)
            var result_swift: MinimalDelegate? = nil
            try this.delegate(value_swift, &result_swift)
            result.pointee = try MinimalDelegateBinding.toABI(result_swift)
        } },
        Array: { this, valueLength, value, resultLength, result in _implement(this) { this in
            guard let result else { throw COM.COMError.pointer }
            let value_swift = WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.fromABI(pointer: value, count: valueLength)
            var result_swift: [Swift.String] = []
            try this.array(value_swift, &result_swift)
            fatalError("Not implemented: out arrays")
        } },
        Reference: { this, value, result in _implement(this) { this in
            guard let result else { throw COM.COMError.pointer }
            let value_swift = WindowsRuntime.Int32Binding.IReferenceToOptional.fromABI(value)
            var result_swift: Swift.Int32? = nil
            try this.reference(value_swift, &result_swift)
            result.pointee = try WindowsRuntime.Int32Binding.IReferenceToOptional.toABI(result_swift)
        } }
    )
}