// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

public enum IEventSourceBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = IEventSource
    public typealias ABIStruct = SWRT_WinRTComponent_IEventSource

    public static let typeName = "WinRTComponent.IEventSource"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<IEventSourceBinding>, IEventSourceProtocol {
        public func fire() throws {
            try _interop.fire()
        }

        public func event(adding handler: MinimalDelegate?) throws -> WindowsRuntime.EventRegistration {
            let _token = try _interop.add_Event(handler)
            return WindowsRuntime.EventRegistration(source: self, token: _token, remover: { this, token in try (this as! Self).event(removing: token) })
        }

        public func event(removing token: WindowsRuntime.EventRegistrationToken) throws {
            try _interop.remove_Event(token)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WinRTComponent_IEventSource_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        add_Event: { this, handler, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            let handler_swift = MinimalDelegateBinding.fromABI(handler)
            let _result_swift = try this.event(adding: handler_swift).token
            _result.pointee = WindowsRuntime.EventRegistrationToken.toABI(_result_swift)
        } },
        remove_Event: { this, token in _implement(this) { this in
            let token_swift = WindowsRuntime.EventRegistrationToken.fromABI(token)
            try this.event(removing: token_swift)
        } },
        Fire: { this in _implement(this) { this in
            try this.fire()
        } }
    )
}