// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

public enum IEventCounterBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = IEventCounter
    public typealias ABIStruct = SWRT_WinRTComponent_IEventCounter

    public static let typeName = "WinRTComponent.IEventCounter"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<IEventCounterBinding>, IEventCounterProtocol {
        public func detach() throws {
            try _interop.detach()
        }

        public func _count() throws -> Swift.Int32 {
            try _interop.get_Count()
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WinRTComponent_IEventCounter_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_Count: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this._count()
        } },
        Detach: { this in _implement(this) { this in
            try this.detach()
        } }
    )
}