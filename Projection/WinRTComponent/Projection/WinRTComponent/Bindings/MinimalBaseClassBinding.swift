// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

public class MinimalBaseClassBinding: WindowsRuntime.ComposableClassBinding {
    public typealias SwiftObject = MinimalBaseClass
    public typealias ABIStruct = SWRT_WinRTComponent_IMinimalBaseClass

    public static let typeName = "WinRTComponent.MinimalBaseClass"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        MinimalBaseClass(_wrapping: consume reference)
    }

    internal enum VirtualTables {
        internal static var iminimalBaseClassOverrides = SWRT_WinRTComponent_IMinimalBaseClassOverrides_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            get_TypeName: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try this._typeName()
                _result.pointee = try WindowsRuntime.StringBinding.toABI(_result_swift)
            } }
        )
    }
}