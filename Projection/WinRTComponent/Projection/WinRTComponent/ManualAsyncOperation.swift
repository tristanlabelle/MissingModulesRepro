// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

public final class ManualAsyncOperation: WindowsRuntime.WinRTImport<ManualAsyncOperationBinding>, WindowsFoundation_IAsyncOperationProtocol, WindowsFoundation_IAsyncInfoProtocol, @unchecked Sendable {
    public typealias TResult = Swift.Int32

    // MARK: WinRTComponent.IManualAsyncOperationFactory members

    public convenience init(_ id: Swift.Int32) throws {
        self.init(_wrapping: try Self._imanualAsyncOperationFactory.createInstance(id))
    }

    // MARK: WinRTComponent.IManualAsyncOperation members

    public func complete(_ result: Swift.Int32) throws {
        try _interop.complete(result)
    }

    public func completeWithError(_ errorCode: COM.HResult) throws {
        try _interop.completeWithError(errorCode)
    }

    // MARK: Windows.Foundation.IAsyncOperation`1<Int32> members

    /// Returns the results of the operation.
    /// - Returns: The results of the operation.
    public func getResults() throws -> Swift.Int32 {
        try _iasyncOperation.getResults()
    }

    /// Gets or sets the method that handles the operation completed notification.
    /// - Returns: The method that handles the notification.
    public func _completed() throws -> WindowsFoundation_AsyncOperationCompletedHandler<Swift.Int32> {
        try COM.NullResult.unwrap(_iasyncOperation.get_Completed())
    }

    /// Gets or sets the method that handles the operation completed notification.
    /// - Returns: The method that handles the notification.
    public func _completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<Swift.Int32>?) throws {
        try _iasyncOperation.put_Completed(handler)
    }

    // MARK: Windows.Foundation.IAsyncInfo members

    /// Cancels the asynchronous operation.
    public func cancel() throws {
        try _iasyncInfo.cancel()
    }

    /// Closes the asynchronous operation.
    public func close() throws {
        try _iasyncInfo.close()
    }

    /// Gets a string that describes an error condition of the asynchronous operation.
    /// - Returns: The error string.
    public func _errorCode() throws -> COM.HResult {
        try _iasyncInfo.get_ErrorCode()
    }

    /// Gets the handle of the asynchronous operation.
    /// - Returns: The handle of the asynchronous operation.
    public func _id() throws -> Swift.UInt32 {
        try _iasyncInfo.get_Id()
    }

    /// Gets a value that indicates the status of the asynchronous operation.
    /// - Returns: The status of the operation, as a value of the enumeration. A value of **Completed** indicates that the method has returned. The **Started** value represents a transition state before any of the other 3 final results (**Completed**, **Error**, **Canceled**) can be determined by the method's invocation.
    public func _status() throws -> WindowsFoundation_AsyncStatus {
        try _iasyncInfo.get_Status()
    }

    // MARK: Implementation details

    private var _lazyIAsyncOperation: COM.COMReference<SWRT_WindowsFoundation_IAsyncOperation_Int32>.Optional = .none

    internal var _iasyncOperation: COM.COMInterop<SWRT_WindowsFoundation_IAsyncOperation_Int32> {
        get throws {
            try _lazyIAsyncOperation.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncOperation_Int32.self)).cast()
            }
        }
    }

    private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

    internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
        get throws {
            try _lazyIAsyncInfo.lazyInitInterop {
                try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
            }
        }
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "WinRTComponent.ManualAsyncOperation")
            }
        }
    }

    private static var _lazyIManualAsyncOperationFactory: COM.COMReference<SWRT_WinRTComponent_IManualAsyncOperationFactory>.Optional = .none

    internal static var _imanualAsyncOperationFactory: COM.COMInterop<SWRT_WinRTComponent_IManualAsyncOperationFactory> {
        get throws {
            try _lazyIManualAsyncOperationFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WinRTComponent_IManualAsyncOperationFactory.self)).cast()
            }
        }
    }
}