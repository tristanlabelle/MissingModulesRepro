// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

public final class Int32Wrapper: WindowsRuntime.WinRTImport<Int32WrapperBinding>, @unchecked Sendable {
    // MARK: IActivationFactory members

    public convenience init() throws {
        self.init(_wrapping: COM.COMReference(transferringRef: try Self._iactivationFactory.activateInstance(binding: Int32WrapperBinding.self)))
    }

    // MARK: WinRTComponent.IInt32Wrapper members

    public var getOnly: Swift.Int32 {
        try! self._getOnly()
    }

    public func _getOnly() throws -> Swift.Int32 {
        try _interop.get_GetOnly()
    }

    public var getSet: Swift.Int32 {
        get {
            try! self._getSet()
        }
        set {
            try! self._getSet(newValue)
        }
    }

    public func _getSet() throws -> Swift.Int32 {
        try _interop.get_GetSet()
    }

    public func _getSet(_ value: Swift.Int32) throws {
        try _interop.put_GetSet(value)
    }

    // MARK: Implementation details

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "WinRTComponent.Int32Wrapper")
            }
        }
    }
}