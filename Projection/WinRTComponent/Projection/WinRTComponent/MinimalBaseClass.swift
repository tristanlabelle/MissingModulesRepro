// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

open class MinimalBaseClass: WindowsRuntime.ComposableClass, @unchecked Sendable {
    // MARK: WinRTComponent.IMinimalBaseClassFactory members

    public init() throws {
        try super.init(_compose: Self.self != MinimalBaseClass.self) {
            (baseInterface, innerInterface: inout IInspectablePointer?) in
            try Self._iminimalBaseClassFactory.createInstance(baseInterface, &innerInterface)
        }
    }

    // MARK: WinRTComponent.IMinimalBaseClassOverrides members

    public var typeName: Swift.String {
        try! self._typeName()
    }

    open func _typeName() throws -> Swift.String {
        try _iminimalBaseClassOverrides.get_TypeName()
    }

    // MARK: WinRTComponent.IMinimalBaseClassStatics members

    public static func createBase() throws -> MinimalBaseClass {
        try COM.NullResult.unwrap(_iminimalBaseClassStatics.createBase())
    }

    public static func createDerivedAsBase() throws -> MinimalBaseClass {
        try COM.NullResult.unwrap(_iminimalBaseClassStatics.createDerivedAsBase())
    }

    public static func createPrivate() throws -> MinimalBaseClass {
        try COM.NullResult.unwrap(_iminimalBaseClassStatics.createPrivate())
    }

    public static func passthrough(_ value: MinimalBaseClass?) throws -> MinimalBaseClass {
        try COM.NullResult.unwrap(_iminimalBaseClassStatics.passthrough(value))
    }

    public static func getTypeName(_ value: MinimalBaseClass?) throws -> Swift.String {
        try _iminimalBaseClassStatics.getTypeName(value)
    }

    // MARK: Implementation details

    private var _lazyIMinimalBaseClass: COM.COMReference<SWRT_WinRTComponent_IMinimalBaseClass>.Optional = .none

    internal var _iminimalBaseClass: COM.COMInterop<SWRT_WinRTComponent_IMinimalBaseClass> {
        get throws {
            try _lazyIMinimalBaseClass.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WinRTComponent_IMinimalBaseClass.self)).cast()
            }
        }
    }

    private var _lazyIMinimalBaseClassOverrides: COM.COMReference<SWRT_WinRTComponent_IMinimalBaseClassOverrides>.Optional = .none

    internal var _iminimalBaseClassOverrides: COM.COMInterop<SWRT_WinRTComponent_IMinimalBaseClassOverrides> {
        get throws {
            try _lazyIMinimalBaseClassOverrides.lazyInitInterop {
                try _queryInnerInterface(uuidof(SWRT_WinRTComponent_IMinimalBaseClassOverrides.self)).cast()
            }
        }
    }

    public init(_wrapping inner: consuming COM.COMReference<SWRT_WinRTComponent_IMinimalBaseClass>) {
        super.init(_wrapping: inner.cast()) // Transitively casts down to IInspectable
    }

    public override init<ABIStruct>(_compose: Swift.Bool, _factory: ComposableFactory<ABIStruct>) throws {
        try super.init(_compose: _compose, _factory: _factory)
    }

    private static var _lazyIActivationFactory: COM.COMReference<SWRT_IActivationFactory>.Optional = .init()

    private static var _iactivationFactory: COM.COMInterop<SWRT_IActivationFactory> {
        get throws {
            try _lazyIActivationFactory.lazyInitInterop {
                try WindowsRuntime.activationFactoryResolver.resolve(runtimeClass: "WinRTComponent.MinimalBaseClass")
            }
        }
    }

    private static var _lazyIMinimalBaseClassFactory: COM.COMReference<SWRT_WinRTComponent_IMinimalBaseClassFactory>.Optional = .none

    internal static var _iminimalBaseClassFactory: COM.COMInterop<SWRT_WinRTComponent_IMinimalBaseClassFactory> {
        get throws {
            try _lazyIMinimalBaseClassFactory.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WinRTComponent_IMinimalBaseClassFactory.self)).cast()
            }
        }
    }

    private static var _lazyIMinimalBaseClassStatics: COM.COMReference<SWRT_WinRTComponent_IMinimalBaseClassStatics>.Optional = .none

    internal static var _iminimalBaseClassStatics: COM.COMInterop<SWRT_WinRTComponent_IMinimalBaseClassStatics> {
        get throws {
            try _lazyIMinimalBaseClassStatics.lazyInitInterop {
                try _iactivationFactory.queryInterface(uuidof(SWRT_WinRTComponent_IMinimalBaseClassStatics.self)).cast()
            }
        }
    }

    // MARK: Override support

    private var _iminimalBaseClassOverrides_outer: COM.COMEmbedding = .uninitialized

    public override func _queryOverridesInterface(_ id: COM.COMInterfaceID) throws -> COM.IUnknownReference.Optional {
        if id == uuidof(SWRT_WinRTComponent_IMinimalBaseClassOverrides.self) {
            if !_iminimalBaseClassOverrides_outer.isInitialized {
                _iminimalBaseClassOverrides_outer.initialize(embedder: self,
                    virtualTable: &MinimalBaseClassBinding.VirtualTables.iminimalBaseClassOverrides)
            }
            return .init(_iminimalBaseClassOverrides_outer.toCOM())
        }
        return .none
    }
}