// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

public func uuidof(_: SWRT_WinRTComponent_IReturnArgument.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x6689E45C, 0x2201, 0x5637, 0xBE1E, 0xBDF2FC8FF274)
}

extension COM.COMInterop where ABIStruct == SWRT_WinRTComponent_IReturnArgument {
    public func int32(_ value: Swift.Int32) throws -> Swift.Int32 {
        var _result: Swift.Int32 = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Int32(this, value, &_result))
        return _result
    }

    public func string(_ value: Swift.String) throws -> Swift.String {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.String(this, value_abi, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func object(_ value: WindowsRuntime.IInspectable?) throws -> WindowsRuntime.IInspectable? {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        var _result: WindowsRuntime.IInspectablePointer? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Object(this, value_abi, &_result))
        return WindowsRuntime.IInspectableBinding.fromABI(consuming: &_result)
    }

    public func `enum`(_ value: MinimalEnum) throws -> MinimalEnum {
        let value_abi = MinimalEnum.toABI(value)
        var _result: SWRT_WinRTComponent_MinimalEnum = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Enum(this, value_abi, &_result))
        return MinimalEnum.fromABI(_result)
    }

    public func `struct`(_ value: MinimalStruct) throws -> MinimalStruct {
        let value_abi = MinimalStruct.toABI(value)
        var _result: SWRT_WinRTComponent_MinimalStruct = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Struct(this, value_abi, &_result))
        return MinimalStruct.fromABI(_result)
    }

    public func interface(_ value: IMinimalInterface?) throws -> IMinimalInterface? {
        var value_abi = try IMinimalInterfaceBinding.toABI(value)
        defer { IMinimalInterfaceBinding.release(&value_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_WinRTComponent_IMinimalInterface>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Interface(this, value_abi, &_result))
        return IMinimalInterfaceBinding.fromABI(consuming: &_result)
    }

    public func `class`(_ value: MinimalClass?) throws -> MinimalClass? {
        var value_abi = try MinimalClassBinding.toABI(value)
        defer { MinimalClassBinding.release(&value_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_WinRTComponent_IMinimalClass>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Class(this, value_abi, &_result))
        return MinimalClassBinding.fromABI(consuming: &_result)
    }

    public func delegate(_ value: MinimalDelegate?) throws -> MinimalDelegate? {
        var value_abi = try MinimalDelegateBinding.toABI(value)
        defer { MinimalDelegateBinding.release(&value_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_WinRTComponent_MinimalDelegate>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Delegate(this, value_abi, &_result))
        return MinimalDelegateBinding.fromABI(consuming: &_result)
    }

    public func array(_ value: [Swift.String]) throws -> [Swift.String] {
        var value_abi = try WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.toABI(value)
        defer { WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.release(&value_abi) }
        var _result: COM.COMArray<SWRT_HString?> = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Array(this, value_abi.count, value_abi.pointer, &_result.count, &_result.pointer))
        return WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.fromABI(consuming: &_result)
    }

    public func reference(_ value: Swift.Int32?) throws -> Swift.Int32? {
        var value_abi = try WindowsRuntime.Int32Binding.IReferenceToOptional.toABI(value)
        defer { WindowsRuntime.Int32Binding.IReferenceToOptional.release(&value_abi) }
        var _result: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IReference>? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Reference(this, value_abi, &_result))
        return WindowsRuntime.Int32Binding.IReferenceToOptional.fromABI(consuming: &_result)
    }
}