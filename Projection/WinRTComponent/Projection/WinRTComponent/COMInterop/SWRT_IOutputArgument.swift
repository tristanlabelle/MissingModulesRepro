// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

public func uuidof(_: SWRT_WinRTComponent_IOutputArgument.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0xA958C919, 0x08BA, 0x57E2, 0x857F, 0x0E9D321334A2)
}

extension COM.COMInterop where ABIStruct == SWRT_WinRTComponent_IOutputArgument {
    public func int32(_ value: Swift.Int32, _ result: inout Swift.Int32) throws {
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Int32(this, value, &result))
    }

    public func string(_ value: Swift.String, _ result: inout Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        var result_abi: SWRT_HString? = nil
        defer { WindowsRuntime.StringBinding.release(&result_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.String(this, value_abi, &result_abi))
        result = WindowsRuntime.StringBinding.fromABI(consuming: &result_abi)
    }

    public func object(_ value: WindowsRuntime.IInspectable?, _ result: inout WindowsRuntime.IInspectable?) throws {
        var value_abi = try WindowsRuntime.IInspectableBinding.toABI(value)
        defer { WindowsRuntime.IInspectableBinding.release(&value_abi) }
        var result_abi: WindowsRuntime.IInspectablePointer? = nil
        defer { WindowsRuntime.IInspectableBinding.release(&result_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Object(this, value_abi, &result_abi))
        result = WindowsRuntime.IInspectableBinding.fromABI(consuming: &result_abi)
    }

    public func `enum`(_ value: MinimalEnum, _ result: inout MinimalEnum) throws {
        let value_abi = MinimalEnum.toABI(value)
        var result_abi: SWRT_WinRTComponent_MinimalEnum = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Enum(this, value_abi, &result_abi))
        result = MinimalEnum.fromABI(result_abi)
    }

    public func `struct`(_ value: MinimalStruct, _ result: inout MinimalStruct) throws {
        let value_abi = MinimalStruct.toABI(value)
        var result_abi: SWRT_WinRTComponent_MinimalStruct = .init()
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Struct(this, value_abi, &result_abi))
        result = MinimalStruct.fromABI(result_abi)
    }

    public func interface(_ value: IMinimalInterface?, _ result: inout IMinimalInterface?) throws {
        var value_abi = try IMinimalInterfaceBinding.toABI(value)
        defer { IMinimalInterfaceBinding.release(&value_abi) }
        var result_abi: Swift.UnsafeMutablePointer<SWRT_WinRTComponent_IMinimalInterface>? = nil
        defer { IMinimalInterfaceBinding.release(&result_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Interface(this, value_abi, &result_abi))
        result = IMinimalInterfaceBinding.fromABI(consuming: &result_abi)
    }

    public func `class`(_ value: MinimalClass?, _ result: inout MinimalClass?) throws {
        var value_abi = try MinimalClassBinding.toABI(value)
        defer { MinimalClassBinding.release(&value_abi) }
        var result_abi: Swift.UnsafeMutablePointer<SWRT_WinRTComponent_IMinimalClass>? = nil
        defer { MinimalClassBinding.release(&result_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Class(this, value_abi, &result_abi))
        result = MinimalClassBinding.fromABI(consuming: &result_abi)
    }

    public func delegate(_ value: MinimalDelegate?, _ result: inout MinimalDelegate?) throws {
        var value_abi = try MinimalDelegateBinding.toABI(value)
        defer { MinimalDelegateBinding.release(&value_abi) }
        var result_abi: Swift.UnsafeMutablePointer<SWRT_WinRTComponent_MinimalDelegate>? = nil
        defer { MinimalDelegateBinding.release(&result_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Delegate(this, value_abi, &result_abi))
        result = MinimalDelegateBinding.fromABI(consuming: &result_abi)
    }

    public func array(_ value: [Swift.String], _ result: inout [Swift.String]) throws {
        var value_abi = try WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.toABI(value)
        defer { WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.release(&value_abi) }
        var result_abi: COM.COMArray<SWRT_HString?> = .init()
        defer { WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.release(&result_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Array(this, value_abi.count, value_abi.pointer, &result_abi.count, &result_abi.pointer))
        result = WindowsRuntime.ArrayBinding<WindowsRuntime.StringBinding>.fromABI(consuming: &result_abi)
    }

    public func reference(_ value: Swift.Int32?, _ result: inout Swift.Int32?) throws {
        var value_abi = try WindowsRuntime.Int32Binding.IReferenceToOptional.toABI(value)
        defer { WindowsRuntime.Int32Binding.IReferenceToOptional.release(&value_abi) }
        var result_abi: Swift.UnsafeMutablePointer<SWRT_WindowsFoundation_IReference>? = nil
        defer { WindowsRuntime.Int32Binding.IReferenceToOptional.release(&result_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Reference(this, value_abi, &result_abi))
        result = WindowsRuntime.Int32Binding.IReferenceToOptional.fromABI(consuming: &result_abi)
    }
}