// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

public func uuidof(_: SWRT_WinRTComponent_IErrorsStatics.Type) -> COM.COMInterfaceID {
    COMInterfaceID(0x7687A806, 0xC4AA, 0x5008, 0xAE65, 0xFF1BDCEFC76B)
}

extension COM.COMInterop where ABIStruct == SWRT_WinRTComponent_IErrorsStatics {
    public func failWith(_ hr: COM.HResult, _ message: Swift.String) throws {
        let hr_abi = COM.HResultBinding.toABI(hr)
        var message_abi = try WindowsRuntime.StringBinding.toABI(message)
        defer { WindowsRuntime.StringBinding.release(&message_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.FailWith(this, hr_abi, message_abi))
    }

    public func get_NotImplementedProperty() throws -> Swift.String {
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.get_NotImplementedProperty(this, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }

    public func put_NotImplementedProperty(_ value: Swift.String) throws {
        var value_abi = try WindowsRuntime.StringBinding.toABI(value)
        defer { WindowsRuntime.StringBinding.release(&value_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.put_NotImplementedProperty(this, value_abi))
    }

    public func call(_ callee: MinimalDelegate?) throws {
        var callee_abi = try MinimalDelegateBinding.toABI(callee)
        defer { MinimalDelegateBinding.release(&callee_abi) }
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.Call(this, callee_abi))
    }

    public func catchHResult(_ callee: MinimalDelegate?) throws -> COM.HResult {
        var callee_abi = try MinimalDelegateBinding.toABI(callee)
        defer { MinimalDelegateBinding.release(&callee_abi) }
        var _result: SWRT_HResult = 0
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CatchHResult(this, callee_abi, &_result))
        return COM.HResultBinding.fromABI(_result)
    }

    public func catchMessage(_ callee: MinimalDelegate?) throws -> Swift.String {
        var callee_abi = try MinimalDelegateBinding.toABI(callee)
        defer { MinimalDelegateBinding.release(&callee_abi) }
        var _result: SWRT_HString? = nil
        try WinRTError.fromABI(this.pointee.VirtualTable.pointee.CatchMessage(this, callee_abi, &_result))
        return WindowsRuntime.StringBinding.fromABI(consuming: &_result)
    }
}