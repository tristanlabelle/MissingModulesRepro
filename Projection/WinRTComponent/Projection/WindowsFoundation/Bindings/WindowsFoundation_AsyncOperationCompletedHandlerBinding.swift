// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

// MARK: Windows.Foundation.AsyncOperationCompletedHandler`1<Int32>

extension WindowsFoundation_AsyncOperationCompletedHandlerBinding {
    internal enum Int32: WindowsRuntime.DelegateBinding {
        public typealias SwiftObject = WindowsFoundation_AsyncOperationCompletedHandler<Swift.Int32>
        public typealias ABIStruct = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_Int32

        public static let typeName = "Windows.Foundation.AsyncOperationCompletedHandler`1<Int32>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static var ireferenceID: COM.COMInterfaceID {
            COMInterfaceID(0xF1746A64, 0x2C4F, 0x5B3F, 0xA608, 0xBFF398453E1F)
        }

        public static var ireferenceArrayID: COM.COMInterfaceID {
            COMInterfaceID(0xA108C7A8, 0x458E, 0x5338, 0xAE4C, 0x3FFB7C36016E)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference).invoke
        }

        public static func toCOM(_ object: @escaping SwiftObject) throws -> ABIReference {
            ExportedDelegate<Self>(object).toCOM()
        }

        private final class Import: COMImport<Int32> {
            public func invoke(_ asyncInfo: WindowsFoundation_IAsyncOperation<Swift.Int32>?, _ asyncStatus: WindowsFoundation_AsyncStatus) throws {
                try _interop.invoke(asyncInfo, asyncStatus)
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_AsyncOperationCompletedHandler_Int32_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            Invoke: { this, asyncInfo, asyncStatus in _implement(this) { this in
                let asyncInfo_swift = WindowsFoundation_IAsyncOperationBinding.Int32.fromABI(asyncInfo)
                let asyncStatus_swift = WindowsFoundation_AsyncStatus.fromABI(asyncStatus)
                try this(asyncInfo_swift, asyncStatus_swift)
            } }
        )
    }
}