// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import WinRTComponent_ABI
import UWP

// MARK: Windows.Foundation.IAsyncOperation`1<Int32>

extension WindowsFoundation_IAsyncOperationBinding {
    internal enum Int32: WindowsRuntime.InterfaceBinding {
        public typealias SwiftObject = WindowsFoundation_IAsyncOperation<Swift.Int32>
        public typealias ABIStruct = SWRT_WindowsFoundation_IAsyncOperation_Int32

        public static let typeName = "Windows.Foundation.IAsyncOperation`1<Int32>"

        public static var interfaceID: COM.COMInterfaceID {
            uuidof(ABIStruct.self)
        }

        public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
            Import(_wrapping: consume reference)
        }

        private final class Import: WinRTImport<Int32>, WindowsFoundation_IAsyncOperationProtocol {
            public func getResults() throws -> Swift.Int32 {
                try _interop.getResults()
            }

            public func _completed() throws -> WindowsFoundation_AsyncOperationCompletedHandler<Swift.Int32> {
                try COM.NullResult.unwrap(_interop.get_Completed())
            }

            public func _completed(_ handler: WindowsFoundation_AsyncOperationCompletedHandler<Swift.Int32>?) throws {
                try _interop.put_Completed(handler)
            }

            // MARK: Windows.Foundation.IAsyncInfo members

            public func cancel() throws {
                try _iasyncInfo.cancel()
            }

            public func close() throws {
                try _iasyncInfo.close()
            }

            public func _errorCode() throws -> COM.HResult {
                try _iasyncInfo.get_ErrorCode()
            }

            public func _id() throws -> Swift.UInt32 {
                try _iasyncInfo.get_Id()
            }

            public func _status() throws -> WindowsFoundation_AsyncStatus {
                try _iasyncInfo.get_Status()
            }

            private var _lazyIAsyncInfo: COM.COMReference<SWRT_WindowsFoundation_IAsyncInfo>.Optional = .none

            internal var _iasyncInfo: COM.COMInterop<SWRT_WindowsFoundation_IAsyncInfo> {
                get throws {
                    try _lazyIAsyncInfo.lazyInitInterop {
                        try _queryInterface(uuidof(SWRT_WindowsFoundation_IAsyncInfo.self)).cast()
                    }
                }
            }
        }

        public static var virtualTablePointer: UnsafeRawPointer {
            .init(withUnsafePointer(to: &virtualTable) { $0 })
        }

        private static var virtualTable = SWRT_WindowsFoundation_IAsyncOperation_Int32_VirtualTable(
            QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
            AddRef: { IUnknownVirtualTable.AddRef($0) },
            Release: { IUnknownVirtualTable.Release($0) },
            GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
            GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
            GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
            put_Completed: { this, handler in _implement(this) { this in
                let handler_swift = WindowsFoundation_AsyncOperationCompletedHandlerBinding.Int32.fromABI(handler)
                try this._completed(handler_swift)
            } },
            get_Completed: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                let _result_swift = try COM.NullResult.`catch`(try this._completed())
                _result.pointee = try WindowsFoundation_AsyncOperationCompletedHandlerBinding.Int32.toABI(_result_swift)
            } },
            GetResults: { this, _result in _implement(this) { this in
                guard let _result else { throw COM.COMError.pointer }
                _result.pointee = try this.getResults()
            } }
        )
    }
}