// Generated by swift-winrt
// swiftlint:disable all

import WindowsRuntime
import UWP_ABI

public enum WindowsStorageStreams_IBufferBinding: WindowsRuntime.InterfaceBinding {
    public typealias SwiftObject = WindowsStorageStreams_IBuffer
    public typealias ABIStruct = SWRT_WindowsStorageStreams_IBuffer

    public static let typeName = "Windows.Storage.Streams.IBuffer"

    public static var interfaceID: COM.COMInterfaceID {
        uuidof(ABIStruct.self)
    }

    public static func _wrap(_ reference: consuming ABIReference) -> SwiftObject {
        Import(_wrapping: consume reference)
    }

    private final class Import: WinRTImport<WindowsStorageStreams_IBufferBinding>, WindowsStorageStreams_IBufferProtocol {
        public func _capacity() throws -> Swift.UInt32 {
            try _interop.get_Capacity()
        }

        public func _length() throws -> Swift.UInt32 {
            try _interop.get_Length()
        }

        public func _length(_ value: Swift.UInt32) throws {
            try _interop.put_Length(value)
        }
    }

    public static var virtualTablePointer: UnsafeRawPointer {
        .init(withUnsafePointer(to: &virtualTable) { $0 })
    }

    private static var virtualTable = SWRT_WindowsStorageStreams_IBuffer_VirtualTable(
        QueryInterface: { IUnknownVirtualTable.QueryInterface($0, $1, $2) },
        AddRef: { IUnknownVirtualTable.AddRef($0) },
        Release: { IUnknownVirtualTable.Release($0) },
        GetIids: { IInspectableVirtualTable.GetIids($0, $1, $2) },
        GetRuntimeClassName: { IInspectableVirtualTable.GetRuntimeClassName($0, $1) },
        GetTrustLevel: { IInspectableVirtualTable.GetTrustLevel($0, $1) },
        get_Capacity: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this._capacity()
        } },
        get_Length: { this, _result in _implement(this) { this in
            guard let _result else { throw COM.COMError.pointer }
            _result.pointee = try this._length()
        } },
        put_Length: { this, value in _implement(this) { this in
            try this._length(value)
        } }
    )
}